{"version":3,"sources":["consts/TabType.ts","components/Tag/Tag.tsx","components/Books/Books.tsx","components/TagFilter/TagFilter.tsx","components/Tabs/Tabs.tsx","App.tsx","api/getBooksList.ts","reportWebVitals.ts","index.tsx"],"names":["TabType","text","useSearchParams","searchParams","setSearchParams","tags","get","type","className","onClick","tag","Array","from","Set","split","join","addTag","booksList","toggleBookStatus","useParams","currentTab","ToRead","toggleStatusText","InProgress","Done","length","data","itemContent","index","book","author","id","title","description","map","useState","setTags","useEffect","replace","tabsList","tagsParam","children","tab","to","link","encodeURIComponent","isCurrent","style","width","App","setBooksList","filteredBooksList","setFilteredBooksList","JSON","parse","localStorage","getItem","inProgressIds","setInProgressIds","doneIds","setDoneIds","a","Promise","resolve","status","longDataList","response","items","console","error","setItem","stringify","filters","filter","bookId","includes","bookTags","every","isBookContainsAllTagFilters","inProgressId","doneId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.8a4a8273.chunk.js","sourcesContent":["enum TabType {\r\n  ToRead = 'to_read',\r\n  InProgress = 'in_progress',\r\n  Done = 'done',\r\n}\r\n\r\nexport default TabType;\r\n","import React from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport './Tag.css';\r\n\r\ninterface ITagProps {\r\n  text: string;\r\n}\r\n\r\nexport default ({ text }: ITagProps): JSX.Element => {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  const tags = searchParams.get('tags');\r\n\r\n  const addTag = (tag: string): void => {\r\n    setSearchParams(\r\n      {\r\n        tags: Array.from(\r\n          new Set([...tags?.split(',') ?? [], tag]),\r\n        ).join(','),\r\n      },\r\n    );\r\n  };\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"tag\"\r\n      onClick={() => addTag(text)}\r\n    >\r\n      #\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n","import React, { ReactNode } from 'react';\r\nimport { Virtuoso } from 'react-virtuoso';\r\nimport { useParams } from 'react-router-dom';\r\nimport { IBook } from '../../models/book';\r\nimport Tag from '../Tag/Tag';\r\nimport './Books.css';\r\nimport TabType from '../../consts/TabType';\r\n\r\ninterface IBooksProps {\r\n  booksList: IBook[];\r\n  toggleBookStatus: (id: string) => void;\r\n}\r\n\r\nexport default ({ booksList, toggleBookStatus }: IBooksProps): JSX.Element => {\r\n  const { currentTab = TabType.ToRead } = useParams();\r\n\r\n  const getToggleStatusText = (): string => {\r\n    if (currentTab === TabType.InProgress) return 'mark as done';\r\n    if (currentTab === TabType.Done) return 'mark to read';\r\n    return 'start reading';\r\n  };\r\n\r\n  const toggleStatusText = getToggleStatusText();\r\n\r\n  const itemContent = (index: number, book: IBook): ReactNode => (\r\n    <article className=\"book\">\r\n      <div className=\"book__author-block\">\r\n        <span>{book.author}</span>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => toggleBookStatus(book.id)}\r\n          className=\"book__toggle-button\"\r\n        >\r\n          {toggleStatusText}\r\n        </button>\r\n      </div>\r\n      <div className=\"book__title\">{book.title}</div>\r\n      <div className=\"book__description\">{book.description}</div>\r\n      {\r\n        Array.from(\r\n          new Set(book.tags),\r\n        ).map((tag) => (\r\n          <Tag key={tag} text={tag} />\r\n        ))\r\n      }\r\n    </article>\r\n  );\r\n\r\n  if (booksList.length === 0) {\r\n    return (\r\n      <div className=\"books__empty-list-label\">\r\n        There are no books with selected filters\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Virtuoso data={booksList} itemContent={itemContent} />\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport Tag from '../Tag/Tag';\r\nimport './TagFilter.css';\r\n\r\nexport default (): JSX.Element | null => {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const [tags, setTags] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    setTags(searchParams.get('tags')?.split(',') ?? []);\r\n  }, [searchParams]);\r\n\r\n  const onClear = (): void => (\r\n    setSearchParams(\r\n      {},\r\n      { replace: true },\r\n    )\r\n  );\r\n\r\n  if (tags.length === 0) {\r\n    return (\r\n      <div className=\"tag-filter\">\r\n        <span className=\"tag-filter__label\">\r\n          There are no filters by tags\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"tag-filter\">\r\n      <span className=\"tag-filter__label\">Filters by tags:</span>\r\n      {\r\n        tags.map((tag) => (\r\n          <Tag key={tag} text={tag} />\r\n        ))\r\n      }\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => onClear()}\r\n        className=\"tag-filter__clear-button\"\r\n      >\r\n        (clear)\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import { Link } from 'react-router-dom';\r\nimport React from 'react';\r\nimport './Tabs.css';\r\n\r\ninterface ITab {\r\n  text: string;\r\n  link: string;\r\n  isCurrent: boolean;\r\n}\r\n\r\ninterface ITabsProps {\r\n  tabsList: ITab[];\r\n  tagsParam: string | null;\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport default ({ tabsList, tagsParam, children }: ITabsProps): JSX.Element => (\r\n  <div className=\"tabs\">\r\n    <nav className=\"tabs__navigation\">\r\n      {\r\n        tabsList.map((tab) => (\r\n          <Link\r\n            to={`${tab.link}${tagsParam ? `?tags=${encodeURIComponent(tagsParam)}` : ''}`}\r\n            key={tab.link}\r\n            className={`tabs__link${tab.isCurrent ? ' tabs__link_current' : ''}`}\r\n            style={{ width: `${100 / tabsList.length}%` }}\r\n          >\r\n            {tab.text}\r\n          </Link>\r\n        ))\r\n      }\r\n    </nav>\r\n    <div className=\"tabs__content\">{children}</div>\r\n  </div>\r\n);\r\n","import React, { useEffect, useState } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport getBooksList from './api/getBooksList';\nimport { IBook } from './models/book';\nimport Books from './components/Books/Books';\nimport TagFilter from './components/TagFilter/TagFilter';\nimport './App.css';\nimport Tabs from './components/Tabs/Tabs';\nimport TabType from './consts/TabType';\n\nconst App: React.FC = (): JSX.Element => {\n  const { currentTab = 'to_read' } = useParams();\n\n  const [searchParams] = useSearchParams();\n  const tagsParam = searchParams.get('tags');\n\n  const [booksList, setBooksList] = useState<IBook[]>([]);\n  const [filteredBooksList, setFilteredBooksList] = useState<IBook[]>([]);\n\n  const [inProgressIds, setInProgressIds] = useState<string[]>(\n    () => (\n      JSON.parse(localStorage.getItem('inProgressIds') ?? '[]')\n    ),\n  );\n\n  const [doneIds, setDoneIds] = useState<string[]>(\n    () => (\n      JSON.parse(localStorage.getItem('doneIds') ?? '[]')\n    ),\n  );\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const response = await getBooksList();\n        setBooksList(response.data.items);\n      } catch (e) {\n        console.error('Error while getting books list');\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('inProgressIds', JSON.stringify(inProgressIds));\n  }, [inProgressIds]);\n\n  useEffect(() => {\n    localStorage.setItem('doneIds', JSON.stringify(doneIds));\n  }, [doneIds]);\n\n  const isCurrentTabContainsBook = (bookId: string): boolean => (\n    (\n      currentTab === TabType.InProgress\n      && inProgressIds.includes(bookId)\n    )\n    || (\n      currentTab === TabType.Done\n      && doneIds.includes(bookId)\n    )\n    || (\n      currentTab === TabType.ToRead\n      && !inProgressIds.includes(bookId)\n      && !doneIds.includes(bookId)\n    )\n  );\n\n  const isBookContainsAllTagFilters = (bookTags: string[], filters: string[]): boolean => (\n    filters.every((filter) => (\n      bookTags.includes(filter)\n    ))\n  );\n\n  useEffect(() => {\n    const filters = tagsParam?.split(',') ?? [];\n    setFilteredBooksList(\n      booksList.filter((book) => (\n        isCurrentTabContainsBook(book.id)\n        && isBookContainsAllTagFilters(book.tags, filters)\n      )),\n    );\n  }, [booksList, currentTab, tagsParam]);\n\n  const tabsList = [\n    {\n      text: `To read (${booksList.length - inProgressIds.length - doneIds.length})`,\n      link: '/',\n      isCurrent: currentTab === 'to_read',\n    },\n    {\n      text: `In progress (${inProgressIds.length})`,\n      link: '/in_progress',\n      isCurrent: currentTab === 'in_progress',\n    },\n    {\n      text: `Done (${doneIds.length})`,\n      link: '/done',\n      isCurrent: currentTab === 'done',\n    },\n  ];\n\n  const toggleBookStatus = (id: string): void => {\n    if (inProgressIds.includes(id)) {\n      setDoneIds([...doneIds, id]);\n      setInProgressIds(\n        inProgressIds.filter((inProgressId) => (\n          inProgressId !== id\n        )),\n      );\n    } else if (doneIds.includes(id)) {\n      setDoneIds(\n        doneIds.filter((doneId) => (\n          doneId !== id\n        )),\n      );\n    } else {\n      setInProgressIds([...inProgressIds, id]);\n    }\n    setFilteredBooksList(\n      filteredBooksList.filter((book) => (\n        book.id !== id\n      )),\n    );\n  };\n\n  return (\n    <div className=\"app\">\n      <Tabs tabsList={tabsList} tagsParam={tagsParam}>\n        <TagFilter />\n        <div className=\"app__books\">\n          <Books booksList={filteredBooksList} toggleBookStatus={toggleBookStatus} />\n        </div>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default App;\n","import { IBook } from '../models/book';\r\nimport longDataList from '../data/longDataList.json';\r\n\r\ninterface IBooksListResponse {\r\n  status: number;\r\n  data: { items: IBook[] };\r\n}\r\n\r\nexport default (): Promise<IBooksListResponse> => (\r\n  new Promise<IBooksListResponse>((resolve) => {\r\n    resolve({\r\n      status: 200,\r\n      data: longDataList,\r\n    });\r\n  })\r\n);\r\n","/* eslint-disable */\nimport { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<App />} />\n        <Route path=\"/:currentTab\" element={<App />} />\n      </Routes>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}